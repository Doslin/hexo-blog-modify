'use strict';

var pagination = require('hexo-pagination');
var funcs = [];
funcs['category'] = function(post, value) {
    var ret = false;

    post.categories.forEach(function(item, i) {
        if (item.name == value) {
            ret = true;
            return;
        }
    });
    return ret;
};

funcs['tag'] = function(post, value) {
    var ret = false;
    post.tags.forEach(function(item, i) {
        if (item.name == value) {
            ret = true;
            return;
        }
    });
    return ret;
};

funcs['path'] = function(post, value) {
    var ret = false;
    ret = post.source.indexOf(value) > -1;
    return ret;
};


module.exports = function(locals) {
    var config = this.config;

    var posts = locals.posts.sort(config.indexMe_generator.order_by);
    var paginationDir = config.pagination_dir || 'page';
    console.log('hexo-gengerator-indexMe');

    posts.data = posts.data.sort(function(a, b) {
        if (a.sticky && b.sticky) { // 两篇文章sticky都有定义
            if (a.sticky == b.sticky) return b.date - a.date; // 若sticky值一样则按照文章日期降序排
            else return b.sticky - a.sticky; // 否则按照sticky值降序排
        } else if (a.sticky && !b.sticky) { // 以下是只有一篇文章sticky有定义，那么将有sticky的排在前面（这里用异或操作居然不行233）
            return -1;
        } else if (!a.sticky && b.sticky) {
            return 1;
        } else return b.date - a.date; // 都没定义按照文章日期降序排
    });


    if (config.indexMe_generator.include || config.indexMe_generator.exclude) {
        var util = require('util');
        var include = config.indexMe_generator.include || [];
        var exclude = config.indexMe_generator.exclude || [];
        if (!util.isArray(include)) {
            include = [include];
        }
        if (!util.isArray(exclude)) {
            exclude = [exclude];
        }

        posts = posts.filter(function(post) {
            var isShow = true;

            if (include.length > 0) {
                isShow = false;
                for (var i = 0; i < include.length; i++) {
                    var str = include[i].split(' ');
                    isShow = funcs[str[0]].call(this, post, str[1]);
                    if (isShow) {
                        break;
                    }
                }
            }
            if (isShow) {
                if (exclude.length > 0) {
                    var isNotShow = false;
                    for (var i = 0; i < exclude.length; i++) {
                        var str = exclude[i].split(' ');
                        isNotShow = funcs[str[0]].call(this, post, str[1]);
                        if (isNotShow) {
                            break;
                        }
                    }
                    isShow = !isNotShow;
                }
            }

            console.log('hexo-generator-indexMe:[info] postIsShow:', isShow, post.title, post.source);
            return isShow;
        });
    }

    console.log('hexo-generator-indexMe:[info] dir:', config.indexMe_generator.pagename);
    return pagination(config.indexMe_generator.pagename, posts, {
        perPage: config.indexMe_generator.per_page,
        layout: ['index', 'archive'],
        format: paginationDir + '/%d/',
        data: {
            __index: true
        }
    });
};